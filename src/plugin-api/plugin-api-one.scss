// Helpers
@function deep-map-validate($map, $keys...) {

  @if type-of($map) != 'map' {
    @error 'The argument $map: `#{$map}` is of incorrect type: `#{type-of($map)}`. Type of `Map` is required!';
  }

  @each $key in $keys {
    @if not map-has-key($map, $key) {
      @return false;
    }
    $map: map-get($map, $key);
  }

  @return true;
}

@function deep-map-get($map, $keys...) {

  @if type-of($map) != 'map' {
    @error 'The argument $map: `#{$map}` is of incorrect type: `#{type-of($map)}`. Type of `Map` is required!';
  }

  @each $key in $keys {
    $map: map-get($map, $key);
  }

  @return $map;
}

@function create($map, $maps...) {

  $last: nth($maps, -1);
  $deep: $last == true;
  $max: if($deep, length($maps) - 1, length($maps));

  // loop through all maps in $maps...
  @for $i from 1 through $max {
    // store current map
    $current: nth($maps, $i);
    // if not in deep mode, simply merge current map with map
    @if not $deep {
      $map: map-merge($map, $current);
    }
    @else {
      // if in deep mode, loop through all tuples in current map
      @each $key, $value in $current {
        // if value is a nested map and same key from map is a nested map as well
        @if type-of($value) == 'map' and type-of(map-get($map, $key)) == 'map' {
          // recursive extend
          $value: create(map-get($map, $key), $value, true);
        }
        // merge current tuple with map
        $map: map-merge(
          $map,
          (
            $key: $value,
          )
        );
      }
    }
  }
  @return $map;
}

@function get($key, $map: $yogurt-plugin) {

  $keys: str-explode($key, '.');

  @if not deep-map-validate($map, $keys...) {
    @error 'The argument $map: `#{$map}` doesn\'t has some of the $keys: `#{$keys}`!';
  }

  @return deep-map-get($map, $keys...);
}

@function str-explode($string, $delimiter: '') {

  @if type-of($string) != 'string' {
    @error 'The argument $string: `#{$string}` is of incorrect type: `#{type-of($string)}`. Type of `String` is required!';
  }
  @else if type-of($delimiter) != 'string' {
    @error 'The argument $string: `#{$string}` is of incorrect type: `#{type-of($string)}`. Type of `String` is required!';
  }

  $result: ();
  $running: true;

  @if str-length($delimiter) == 0 {
    @for $i from 1 through str-length($string) {
      $result: append($result, str-slice($string, $i, $i));
    }
    @return $result;
  }

  @while $running {
    $index: str-index($string, $delimiter);
    @if $index != null {
      $item: str-slice($string, 1, ($index - 1));
      $result: append($result, $item);
      $string: str-slice($string, ($index + str-length($delimiter)));
    }
    @else {
      $running: false;
    }
  }

  @return append($result, $string);
}

@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}

@mixin atRule($pseudo:null, $classname:null, $modifier:null, $property:null, $value:null) {
    .\(#{$pseudo}\)#{$classname}-#{$modifier}:#{$pseudo} {
    #{$property}: #{$value}
  }
}

$yogurt-plugin: () !default;

// Plugin API
$yogurt-plugin: create(
  (
    'module': (
      'pseudo': null,
      'classname': text,
      'property': font-size,
      'modifier': (1rem, 2rem, 3rem)
    )
  ),
  $yogurt-plugin,
  true
);

// API Driver
@each $value in get('module.modifier') {

  $pseudo: get('module.pseudo');
  $classname: get('module.classname');
  $property: get('module.property');
  $modifier: strip-unit($value);

  @if ($pseudo == hover) {
    @include atRule($pseudo, $classname, $modifier, $property, $value);
  }
  @else if ($pseudo == focus) {
    @include atRule($pseudo, $classname, $modifier, $property, $value);
  }
  // without `pseudo class`
  @else if ($pseudo == null) {
    .#{$classname}-#{$modifier} {
      #{$property}: #{$value}
    }
  }

}

